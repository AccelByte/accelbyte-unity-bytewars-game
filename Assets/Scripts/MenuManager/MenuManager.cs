// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using TMPro;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;
using System.Linq;

public class MenuManager : MonoBehaviour
{
    public static MenuManager Instance { get; private set; }
    public bool IsInitiated { get; private set; }
    public bool IsLoading => _menusDictionary[AssetEnum.LoadingMenuCanvas].gameObject.activeSelf;
    public Dictionary<AssetEnum, MenuCanvas> AllMenu => _menusDictionary;
    public readonly Vector3[] TargetPositions =
    {
        new(0, 0, -10),
        new(36, 0, -10),
        new(72, 0, -10),
        new(108, 0, -10)
    };
    
    private const float AnimationDuration = 1f;
    private Dictionary<MenuCanvas, List<AutoGeneratedButtonModel>> _containerAutoGeneratedButtons = new();
    private readonly Dictionary<AssetEnum, MenuCanvas> _menusDictionary = new();
    private readonly Stack<MenuCanvas> _mainMenusStack = new();
    
    private EventSystem _eventSystem;
    private MenuCanvas _currentMainMenu;
    private MatchLobbyMenu _matchLobby;
    private GameOverMenuCanvas _gameOverCanvas;

    #region Initialization and Lifecycle

    [RuntimeInitializeOnLoadMethod]
    private static void CreateInstance()
    {
        if (Instance != null)
        {
            return;
        }

        GameObject menuManagerGameObject = new("MenuManager");
        Instance = menuManagerGameObject.AddComponent<MenuManager>();
    }
    
    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(this);
            return;
        }

        Instance = this;
        
        DontDestroyOnLoad(gameObject);
        
        SceneManager.sceneLoaded += OnSceneLoaded;
        SceneManager.sceneUnloaded += OnSceneUnloaded;
    }
    
    private void Start()
    {
#if !UNITY_EDITOR && !UNITY_SERVER
        SplashMovieCanvas.PlaySplashMovie(onComplete: () => 
        {
            InitMenu();
            IsInitiated = true;
        });
#else
        InitMenu();
        IsInitiated = true;
#endif
    }

    #endregion
    
    #region Menu Management Methods

    public MenuCanvas GetCurrentMenu() => _currentMainMenu;

    public MenuCanvas GetMenu(AssetEnum assetEnum) => _menusDictionary.GetValueOrDefault(assetEnum);

    public MenuCanvas ChangeToMenu(AssetEnum assetEnum)
    {
        bool isMainMenu = assetEnum is AssetEnum.MainMenuCanvas;
        if (isMainMenu)
        {
            _mainMenusStack.Clear();
        }

        bool isCurrentMenuRequested = _currentMainMenu.GetAssetEnum() == assetEnum;
        if (isCurrentMenuRequested && _mainMenusStack.Count > 0)
        {
            int currentMenuIndex = _mainMenusStack.Count - 1;

            CameraMovement.MoveCameraLerp(GameManager.Instance.MainCamera, 
                GetTargetPositionByStack(currentMenuIndex), AnimationDuration);

            return _menusDictionary[assetEnum];
        }
        
        bool isAuthEssentialsActive = TutorialModuleManager.Instance.IsModuleActive(TutorialType.AuthEssentials);
        if (isAuthEssentialsActive)
        {
            ModuleModel authEssentials = TutorialModuleManager.Instance.GetModule(TutorialType.AuthEssentials);
            if (assetEnum == authEssentials.mainPrefab.GetAssetEnum())
            {
                _mainMenusStack.Clear();
            }
        }

        if (!_menusDictionary.ContainsKey(assetEnum))
        {
            InstantiateCanvas(assetEnum);
        }
        
        int targetIndex = _mainMenusStack.Count;

        bool isMatchLobby = assetEnum is AssetEnum.MatchLobbyMenuCanvas or AssetEnum.MatchLobbyTeamMenuCanvas;
        if (isMatchLobby)
        {
            targetIndex = 0;
        }

        CameraMovement.MoveCameraLerp(GameManager.Instance.MainCamera, 
            GetTargetPositionByStack(targetIndex), AnimationDuration);

        OnChangeMenuComplete(assetEnum);

        return _menusDictionary[assetEnum];
    }

    public MenuCanvas ChangeToMenu(TutorialType tutorialType)
    {
        if (_currentMainMenu != null)
        {
            _currentMainMenu.gameObject.SetActive(false);
        }

        _currentMainMenu = _menusDictionary[GetAssetEnumByTutorialType(tutorialType)];
        _mainMenusStack.Push(_currentMainMenu);
        _currentMainMenu.gameObject.SetActive(true);

        return ChangeToMenu(GetAssetEnumByTutorialType(tutorialType));
    }

    /// <summary>
    /// Change Menu Callback
    /// </summary>
    /// <param name="assetEnum"></param>
    private void OnChangeMenuComplete(AssetEnum assetEnum)
    {
        if (_currentMainMenu != null)
        {
            _currentMainMenu.gameObject.SetActive(false);
        }
        
        MenuCanvas targetMenu = _menusDictionary[assetEnum];
        if (!targetMenu.gameObject.activeSelf)
        {
            targetMenu.gameObject.SetActive(true);
        }
        
        _currentMainMenu = targetMenu;
        _eventSystem.SetSelectedGameObject(targetMenu.GetFirstButton());
        _mainMenusStack.Push(_currentMainMenu);
    }

    public void CloseInGameMenu()
    {
        if (!IsGameScene())
        {
            return;
        }

        BlurEffect.RemoveBlurEffect();
        CloseMenuPanel();
    }

    public MenuCanvas ShowInGameMenu(AssetEnum assetEnum)
    {
        if (!_currentMainMenu)
        {
            return null;
        }
        
        if (_currentMainMenu.GetAssetEnum() != assetEnum)
        {
            _currentMainMenu = SwitchToMenu(assetEnum);
        }
        
        BlurEffect.ApplyBlurEffect();
        _currentMainMenu.gameObject.SetActive(true);
        return _currentMainMenu;
    }

    private MenuCanvas SwitchToMenu(AssetEnum assetEnum)
    {
        MenuCanvas targetMenu = _menusDictionary[assetEnum];
        _eventSystem.SetSelectedGameObject(targetMenu.GetFirstButton());
        return targetMenu;
    }
    
    public void OnBackPressed()
    {
        bool isFirstMenu = _mainMenusStack.Count <= 1;
        if (isFirstMenu)
        {
            return;
        }

        int targetIndex = _mainMenusStack.Count - 2;
        CameraMovement.MoveCameraLerp(GameManager.Instance.MainCamera, GetTargetPositionByStack(targetIndex), AnimationDuration);
        
        _mainMenusStack.Pop().gameObject.SetActive(false);
        _currentMainMenu = _mainMenusStack.Peek();
        _currentMainMenu.gameObject.SetActive(true);

        GameObject backButton = _currentMainMenu.GetFirstButton();
        backButton.SetActive(true);
        _eventSystem.SetSelectedGameObject(backButton);
    }

    /// <summary>
    /// Close the current menu panel
    /// </summary>
    public void CloseMenuPanel()
    {
        _currentMainMenu.gameObject.SetActive(false);
    }

    /// <summary>
    /// Go to main menu scene from another scene
    /// </summary>
    /// <param name="sceneBuildIndex"></param>
    public void ChangeToMainMenu()
    {
        AudioManager.Instance.PlayMenuBGM();

        OnChangeToMainMenuComplete();
    }
    
    /// <summary>
    /// Go to main menu scene callback
    /// </summary>
    /// <param name="sceneBuildIndex"></param>
    private void OnChangeToMainMenuComplete()
    {
        if (IsMainMenuScene())
        {
            return;
        }
        
        SceneManager.LoadScene(GameConstant.MenuSceneBuildIndex);
        ChangeToMenu(AssetEnum.MainMenuCanvas);
    }

    private Vector3 GetTargetPositionByStack(int targetIndex)
    {
        bool isIndexOutOfRange = targetIndex >= TargetPositions.Length;
        bool isIndexNegative = targetIndex < 0;

        if (isIndexOutOfRange)
        {
            targetIndex = TargetPositions.Length - 1;
        }
        else if (isIndexNegative)
        {
            targetIndex = 0;
        }

        return TargetPositions[targetIndex];
    }

    #endregion

    #region Initialize and Instantiate Menu Prefab

    private void InitMenu()
    {
        if (AudioManager.Instance != null)
        {
            AudioManager.Instance.PlayMenuBGM();
        }

        if (!AssetManager.Singleton)
        {
            return;
        }
        
        InitOverlay();
        
        var allActiveModule = TutorialModuleManager.Instance.GetAllActiveModule();
        _containerAutoGeneratedButtons = MenuHelper.GetContainerAndButtons(allActiveModule);
        foreach (var moduleNamePair in allActiveModule)
        {
            InitMenuByModules(moduleNamePair.Value);
        }

        InitCoreMenu();

        bool isAuthEssentialsActive = TutorialModuleManager.Instance.IsModuleActive(TutorialType.AuthEssentials);
        if (isAuthEssentialsActive && IsAgsSdkReady())
        {
            ChangeToMenu(TutorialType.AuthEssentials);
        }
        else if (isAuthEssentialsActive && !IsAgsSdkReady())
        {
            //TODO: initialize ags sdk
            _currentMainMenu.gameObject.SetActive(false);
            _currentMainMenu = _menusDictionary[AssetEnum.LoadingMenuCanvas];
            _currentMainMenu.gameObject.SetActive(true);
        }
        else
        {
            _currentMainMenu = _menusDictionary[AssetEnum.MainMenuCanvas];
            _currentMainMenu.gameObject.SetActive(true);
            _mainMenusStack.Push(_currentMainMenu);
        }
    }

    private AssetEnum GetAssetEnumByTutorialType(TutorialType tutorialType)
    {
        if (!TutorialModuleManager.Instance.IsModuleActive(tutorialType))
        {
            BytewarsLogger.LogWarning($"{tutorialType} is not active in this context.");
            return AssetEnum.MainMenuCanvas;
        }

        ModuleModel module = TutorialModuleManager.Instance.GetAllActiveModule()[tutorialType];
        return (AssetEnum) Enum.Parse(typeof(AssetEnum), module.mainPrefab.name);
    }

    private void InitCoreMenu()
    {
        if (!AssetManager.Singleton)
        {
            return;
        }

        object mainMenuConfigObj = AssetManager.Singleton.GetAsset(AssetEnum.MainMenuUiConfig);
        MainMenuUiConfig mainMenuConfig = mainMenuConfigObj as MainMenuUiConfig;

        if (mainMenuConfig == null)
        {
            return;
        }

        MenuCanvas starterMenu = Instantiate(mainMenuConfig.starter, transform);
        GameObject starterMenuGameObject = starterMenu.gameObject;

        starterMenuGameObject.SetActive(false);
        string mainMenuName = mainMenuConfig.starter.gameObject.name;
        starterMenuGameObject.name = mainMenuName;
        _menusDictionary[starterMenu.GetAssetEnum()] = starterMenu;
        
        foreach (MenuCanvas menuCanvas in mainMenuConfig.otherMenuCanvas)
        {
            MenuCanvas otherCoreMenu = Instantiate(menuCanvas, transform);
            otherCoreMenu.gameObject.SetActive(false);
            string gameObjectName = menuCanvas.gameObject.name;
            if (_containerAutoGeneratedButtons.TryGetValue(menuCanvas, out var autoGeneratedButtons))
            {
                otherCoreMenu.AddGeneratedButton(autoGeneratedButtons);
            }
            otherCoreMenu.name = gameObjectName;
            _menusDictionary[menuCanvas.GetAssetEnum()] = otherCoreMenu;
        }
    }

    private void InitMenuByModules(ModuleModel moduleData)
    {
        if (moduleData.isUIDisable)
        {
            return;
        }

        MenuCanvas modulePrefab = moduleData.mainPrefab;
        MenuCanvas menuByModule = Instantiate(modulePrefab, Vector3.zero, Quaternion.identity, Instance.transform);

        menuByModule.gameObject.SetActive(false);
        if (_containerAutoGeneratedButtons.TryGetValue(modulePrefab, out var autoGeneratedButtons))
        {
            menuByModule.AddGeneratedButton(autoGeneratedButtons);
        }

        menuByModule.name = modulePrefab.name;
        _menusDictionary.TryAdd(menuByModule.GetAssetEnum(), menuByModule);
        _menusDictionary[menuByModule.GetAssetEnum()].gameObject.SetActive(false);

        if (!moduleData.hasAdditionalPrefab)
        {
            return;
        }

        if (moduleData.additionalPrefab.Length == 0)
        {
            return;
        }
            
        foreach (MenuCanvas additionalPrefab in moduleData.additionalPrefab)
        {
            MenuCanvas additionalMenu = Instantiate(additionalPrefab, Vector3.zero, Quaternion.identity, Instance.transform);
            additionalMenu.gameObject.SetActive(false);

            if (_containerAutoGeneratedButtons.TryGetValue(additionalPrefab, out var autoGeneratedButtonsAdditional))
            {
                additionalMenu.AddGeneratedButton(autoGeneratedButtonsAdditional);
            }

            additionalMenu.name = additionalPrefab.name;

            _menusDictionary.TryAdd(additionalMenu.GetAssetEnum(), additionalMenu);
            _menusDictionary[additionalMenu.GetAssetEnum()].gameObject.SetActive(false);
        }
    }

    private void InitOverlay()
    {
        GameObject pushNotificationPrefab = AssetManager.Singleton.GetAsset(AssetEnum.PushNotificationCanvas) as GameObject;
        GameObject pushNotificationCanvas = Instantiate(pushNotificationPrefab, transform);
        pushNotificationCanvas.name = pushNotificationPrefab.name;
        pushNotificationCanvas.SetActive(false);
    }

    public void InstantiateCanvas(AssetEnum assetEnum)
    {
        if (_menusDictionary.TryGetValue(assetEnum, out MenuCanvas value))
        {
            return;
        }

        var test = (GameObject) AssetManager.Singleton.GetAsset(assetEnum);
        var modulePrefab = test.GetComponent<MenuCanvas>();
        MenuCanvas menuByModule = Instantiate(modulePrefab, Vector3.zero, Quaternion.identity, Instance.transform);

        menuByModule.gameObject.SetActive(false);
        menuByModule.name = modulePrefab.name;
        _menusDictionary.Add(menuByModule.GetAssetEnum(), menuByModule);
    }

    /// <summary>
    /// Helper Function to disable Button UI
    /// </summary>
    /// <param name="button"></param>
    private void DisableButton(Button button)
    {
        button.enabled = false;
        button.transition = Selectable.Transition.None;
        button.GetComponent<Image>().color = Color.clear;
        button.GetComponentInChildren<TMP_Text>().color = Color.gray;
        button.enabled = false;
    }

    #endregion
    
    #region Login Menu Methods

    /// <summary>
    /// Return to login menu
    /// </summary>
    public void BackToLoginMenu()
    {
        if (_currentMainMenu != null)
        {
            _currentMainMenu.gameObject.SetActive(false);
        }

        Dictionary<TutorialType, ModuleModel> tutorialActiveModules = TutorialModuleManager.Instance.GetAllActiveModule();
        bool isAuthEssentialsActive = tutorialActiveModules.ContainsKey(TutorialType.AuthEssentials);
        if (!isAuthEssentialsActive)
        {
            return;
        }

        ModuleModel authEssential = tutorialActiveModules[TutorialType.AuthEssentials];
        AssetEnum authEssentialPrefab = (AssetEnum) Enum.Parse(typeof(AssetEnum), authEssential.mainPrefab.name);

        _mainMenusStack.Clear();
        _currentMainMenu = _menusDictionary[authEssentialPrefab];
        _currentMainMenu.gameObject.SetActive(true);
        _mainMenusStack.Push(_currentMainMenu);
    }

    #endregion

    #region Loading Menu Methods

    public void ShowLoading(string info, LoadingTimeoutInfo loadingTimeoutInfo = null, UnityAction cancelCallback = null)
    {
        LoadingMenuCanvas loadingMenuCanvas = _menusDictionary[AssetEnum.LoadingMenuCanvas] as LoadingMenuCanvas;
        if (loadingMenuCanvas == null)
        {
            return;
        }

        if (IsMainMenuScene())
        {
            BlurEffect.ApplyBlurEffect(0.5f);
        }
        else
        {
            BlurEffect.RemoveBlurEffect();
        }
        
        _currentMainMenu.gameObject.SetActive(false);
        loadingMenuCanvas.gameObject.SetActive(true);
        loadingMenuCanvas.Show(info, loadingTimeoutInfo, cancelCallback);
    }

    public void HideLoading(bool showActiveMenuImmediately = true)
    {
        _menusDictionary[AssetEnum.LoadingMenuCanvas].gameObject.SetActive(false);

        if (IsMainMenuScene())
        {
            BlurEffect.ApplyBlurEffect();
        }
        else
        {
            BlurEffect.RemoveBlurEffect();
        }

        if (showActiveMenuImmediately)
        {
            _currentMainMenu.gameObject.SetActive(true);
        }
    }

    #endregion

    #region Countdown Methods

    public void UpdateLobbyCountdown(int countdown)
    {
        if (_matchLobby == null)
        {
            MenuCanvas menu = _menusDictionary[AssetEnum.MatchLobbyMenuCanvas];
            _matchLobby = menu as MatchLobbyMenu;
        }

        if (_matchLobby != null)
        {
            _matchLobby.Countdown(countdown);
        }
    }

    public void UpdateGameOverCountdown(int countdown)
    {
        if (_gameOverCanvas == null)
        {
            MenuCanvas menu = _menusDictionary[AssetEnum.GameOverMenuCanvas];
            _gameOverCanvas = menu as GameOverMenuCanvas;
        }

        if (_gameOverCanvas != null)
        {
            _gameOverCanvas.Countdown(countdown);
        }
    }

    #endregion

    #region Info Menu Methods

    public void ShowInfo(string info, string title="Info")
    {
        _currentMainMenu.gameObject.SetActive(false);
        InfoMenuCanvas menu = _menusDictionary[AssetEnum.InfoMenuCanvas] as InfoMenuCanvas;

        if (menu != null)
        {
            menu.Show(info, title);
        }
    }

    public void HideInfo()
    {
        _menusDictionary[AssetEnum.InfoMenuCanvas].gameObject.SetActive(false);
        _currentMainMenu.gameObject.SetActive(true);
    }

    #endregion
    
    #region Events and Callbacks

    public void SetEventSystem(EventSystem eventSystem)
    {
        _eventSystem = eventSystem;
        GameObject firstButton = _currentMainMenu.GetFirstButton();
        _eventSystem.firstSelectedGameObject = firstButton;
        _eventSystem.SetSelectedGameObject(firstButton);
    }

    private static void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        if (IsMainMenuScene())
        {
            BlurEffect.ApplyBlurEffect();
        }
        else
        {
            BlurEffect.RemoveBlurEffect(0f);
        }
    }

    private void OnSceneUnloaded(Scene scene)
    {
        CameraMovement.MoveCamera(GameManager.Instance.MainCamera, TargetPositions.First());
    }

    #endregion
    
    public T GetChildComponent<T>() => GetComponentInChildren<T>(true);

    #region State Check methods

    private static bool IsAgsSdkReady() => TutorialModuleUtil.IsAccelbyteSDKInstalled();
    private static bool IsMainMenuScene() => SceneManager.GetActiveScene().buildIndex == GameConstant.MenuSceneBuildIndex;
    private static bool IsGameScene() => SceneManager.GetActiveScene().buildIndex == GameConstant.GameSceneBuildIndex;

    #endregion
}
