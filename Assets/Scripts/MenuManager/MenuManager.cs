// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using TMPro;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;
using System.Linq;

public class MenuManager : MonoBehaviour
{
    public static MenuManager Instance { get; private set; }
    public bool IsInitiated { get; private set; }
    public bool IsLoading => GetMenu(AssetEnum.LoadingMenuCanvas).gameObject.activeSelf;
    public PromptMenuCanvas PromptMenu { get; private set; }

    public Dictionary<AssetEnum, MenuCanvas> AllMenu => menusDictionary;
    public readonly List<Vector3> TargetCameraPositions = new ()
    {
        new Vector3(0, 0, -10),
        new Vector3(36, 0, -10),
        new Vector3(72, 0, -10),
        new Vector3(108, 0, -10)
    };

    public static event Action<MenuCanvas> OnMenuChanged;

    private const float AnimationDuration = 1f;
    private Dictionary<MenuCanvas, List<AutoGeneratedButtonModel>> containerAutoGeneratedButtons = new();
    private readonly Dictionary<AssetEnum, MenuCanvas> menusDictionary = new();
    private readonly Stack<MenuCanvas> mainMenusStack = new();
    private readonly Dictionary<AssetEnum, int> menuCameraPosOverrides = new()
    {
        { AssetEnum.MainMenuCanvas, 0 },
        { AssetEnum.MatchLobbyMenuCanvas, 0 },
        // tutorialmodules specifics
        { AssetEnum.LoginMenuCanvas, 0 },
        { AssetEnum.LoginMenuCanvas_Starter, 0 },
        { AssetEnum.FriendsMenuCanvas, 2 },
        { AssetEnum.FriendsMenuCanvas_Starter, 2 },
        { AssetEnum.FriendDetailsMenuCanvas, 2 },
        { AssetEnum.FriendDetailsMenuCanvas_Starter, 2 }
    };
    
    private EventSystem eventSystem;
    private MenuCanvas currentMainMenu;
    private MenuCanvas currentPromptMenu;
    private MatchLobbyMenu matchLobby;
    private GameOverMenuCanvas gameOverCanvas;

    #region Initialization and Lifecycle

    [RuntimeInitializeOnLoadMethod]
    private static void CreateInstance()
    {
        if (Instance != null)
        {
            return;
        }

        GameObject menuManagerGameObject = new("MenuManager");
        Instance = menuManagerGameObject.AddComponent<MenuManager>();
    }

    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(this);
            return;
        }

        Instance = this;
        
        DontDestroyOnLoad(gameObject);
        
        SceneManager.sceneLoaded += OnSceneLoaded;
        SceneManager.sceneUnloaded += OnSceneUnloaded;
    }
    
    private void Start()
    {
#if UNITY_EDITOR || UNITY_SERVER || UNITY_WEBGL
    InitMenu();
    IsInitiated = true;
#else
    SplashMovieCanvas.PlaySplashMovie(onComplete: () => 
    {
        InitMenu();
        IsInitiated = true;
    });
#endif
    }

    #endregion
    
    #region Menu Management Methods

    public MenuCanvas GetCurrentMenu() => currentMainMenu;

    public MenuCanvas GetMenu(AssetEnum assetEnum) => menusDictionary.GetValueOrDefault(assetEnum);

    public MenuCanvas ChangeToMenu(AssetEnum assetEnum)
    {
        int targetCameraPosIndex = mainMenusStack.Count;

        bool containsIndexOverride = menuCameraPosOverrides.ContainsKey(assetEnum);
        if (containsIndexOverride)
        {
            targetCameraPosIndex = menuCameraPosOverrides[assetEnum];
        }

        bool isMainMenu = assetEnum is AssetEnum.MainMenuCanvas;
        if (isMainMenu)
        {
            mainMenusStack.Clear();
        }
        
        bool isCurrentMenuRequested = currentMainMenu.GetAssetEnum() == assetEnum;
        if (isCurrentMenuRequested && mainMenusStack.Any())
        {
            if (!containsIndexOverride)
            {
                targetCameraPosIndex = mainMenusStack.Count - 1;
            }

            MoveCameraToTargetPosition(targetCameraPosIndex);

            return menusDictionary[assetEnum];
        }

        if (GetMenu(assetEnum) == null)
        {
            InstantiateCanvas(assetEnum);
        }

        MoveCameraToTargetPosition(targetCameraPosIndex);
        OnChangeMenuComplete(assetEnum);

        return menusDictionary[assetEnum];
    }

    public MenuCanvas ChangeToMenu(TutorialType tutorialType)
    {
        if (currentMainMenu != null)
        {
            currentMainMenu.gameObject.SetActive(false);
        }
        
        bool isAuthEssentialsRequested = tutorialType == TutorialType.AuthEssentials;
        if (IsAuthEssentialsActive() && isAuthEssentialsRequested)
        {
            mainMenusStack.Clear();
        }

        currentMainMenu = menusDictionary[GetAssetEnumByTutorialType(tutorialType)];
        mainMenusStack.Push(currentMainMenu);
        currentMainMenu.gameObject.SetActive(true);

        return ChangeToMenu(GetAssetEnumByTutorialType(tutorialType));
    }

    /// <summary>
    /// Change Menu Callback
    /// </summary>
    /// <param name="assetEnum"></param>
    private void OnChangeMenuComplete(AssetEnum assetEnum)
    {
        if (currentMainMenu != null)
        {
            currentMainMenu.gameObject.SetActive(false);
        }
        
        MenuCanvas targetMenu = menusDictionary[assetEnum];
        bool isPromptActive = currentPromptMenu != null && currentPromptMenu.gameObject.activeInHierarchy;
        if (!targetMenu.gameObject.activeSelf)
        {
            targetMenu.gameObject.SetActive(!isPromptActive);
        }

        currentMainMenu = targetMenu;
#if !UNITY_WEBGL
        eventSystem.SetSelectedGameObject(targetMenu.GetFirstButton());
#endif
        mainMenusStack.Push(currentMainMenu);
        
        OnMenuChanged?.Invoke(currentMainMenu);
    }

    public void CloseInGameMenu()
    {
        if (!IsGameScene())
        {
            return;
        }

        BlurEffect.RemoveBlurEffect();
        CloseMenuPanel();
    }

    public MenuCanvas ShowInGameMenu(AssetEnum assetEnum)
    {
        if (!currentMainMenu)
        {
            return null;
        }
        
        if (currentMainMenu.GetAssetEnum() != assetEnum)
        {
            currentMainMenu = SwitchToMenu(assetEnum);
        }
        
        BlurEffect.ApplyBlurEffect();
        currentMainMenu.gameObject.SetActive(true);
        return currentMainMenu;
    }

    private MenuCanvas SwitchToMenu(AssetEnum assetEnum)
    {
        MenuCanvas targetMenu = menusDictionary[assetEnum];
#if !UNITY_WEBGL
        eventSystem.SetSelectedGameObject(targetMenu.GetFirstButton());
#endif
        return targetMenu;
    }
    
    public void OnBackPressed()
    {
        bool isFirstMenu = mainMenusStack.Count <= 1;
        if (isFirstMenu)
        {
            return;
        }

        int targetIndex = mainMenusStack.Count - 2;
        
        mainMenusStack.Pop().gameObject.SetActive(false);
        currentMainMenu = mainMenusStack.Peek();
        currentMainMenu.gameObject.SetActive(true);
        
        if (menuCameraPosOverrides.ContainsKey(currentMainMenu.GetAssetEnum()))
        {
            targetIndex = menuCameraPosOverrides[currentMainMenu.GetAssetEnum()];
        }

        MoveCameraToTargetPosition(targetIndex);

        GameObject backButton = currentMainMenu.GetFirstButton();
        backButton.SetActive(true);
#if !UNITY_WEBGL
        eventSystem.SetSelectedGameObject(backButton);
#endif
        OnMenuChanged?.Invoke(currentMainMenu);
    }

    /// <summary>
    /// Close the current menu panel
    /// </summary>
    public void CloseMenuPanel()
    {
        currentMainMenu.gameObject.SetActive(false);
    }

    /// <summary>
    /// Go to main menu scene from another scene
    /// </summary>
    /// <param name="sceneBuildIndex"></param>
    public void ChangeToMainMenu()
    {
        AudioManager.Instance.PlayMenuBGM();

        OnChangeToMainMenuComplete();
    }
    
    /// <summary>
    /// Go to main menu scene callback
    /// </summary>
    /// <param name="sceneBuildIndex"></param>
    private void OnChangeToMainMenuComplete()
    {
        if (IsMainMenuScene())
        {
            ChangeToMenu(AssetEnum.MainMenuCanvas);
            return;
        }
        
        SceneManager.LoadScene(GameConstant.MenuSceneBuildIndex);
        ChangeToMenu(AssetEnum.MainMenuCanvas);
    }
    
    private void MoveCameraToTargetPosition(int targetIndex)
    {
        Camera mainCamera = GameManager.Instance.MainCamera;
        Vector3 targetPosition = GetTargetPositionByStack(targetIndex);

        CameraMovement.MoveCameraLerp(mainCamera, targetPosition, AnimationDuration);
    }

    private Vector3 GetTargetPositionByStack(int targetIndex)
    {
        bool isIndexOutOfRange = targetIndex >= TargetCameraPositions.Count;
        bool isIndexNegative = targetIndex < 0;

        if (isIndexOutOfRange)
        {
            targetIndex = TargetCameraPositions.Count - 1;
        }
        else if (isIndexNegative)
        {
            targetIndex = 0;
        }

        return TargetCameraPositions[targetIndex];
    }

    #endregion

    #region Initialize and Instantiate Menu Prefab

    private void InitMenu()
    {
        if (AudioManager.Instance != null)
        {
            AudioManager.Instance.PlayMenuBGM();
        }

        if (!AssetManager.Singleton)
        {
            return;
        }
        
        InitOverlay();
        InitPromptMenu();
        
        var allActiveModule = TutorialModuleManager.Instance.GetAllActiveModule();
        containerAutoGeneratedButtons = MenuHelper.GetContainerAndButtons(allActiveModule);
        foreach (var moduleNamePair in allActiveModule)
        {
            InitMenuByModules(moduleNamePair.Value);
        }

        InitCoreMenu();
        
#if !UNITY_WEBGL
    if (IsAuthEssentialsActive() && IsAgsSdkReady())
    {
        ChangeToMenu(TutorialType.AuthEssentials);
    }
    else 
    {
        currentMainMenu = IsAgsSdkReady() ? menusDictionary[AssetEnum.MainMenuCanvas] : menusDictionary[AssetEnum.LoadingMenuCanvas];
        if (!IsAgsSdkReady()) 
        { 
            //TODO: initialize ags sdk 
        }

        currentMainMenu.gameObject.SetActive(true);
        mainMenusStack.Push(currentMainMenu);
    }
#else
    if (IsAuthEssentialsActive())
    {
        ChangeToMenu(TutorialType.AuthEssentials);
    }
    else
    {
        currentMainMenu = menusDictionary[AssetEnum.MainMenuCanvas];
        currentMainMenu.gameObject.SetActive(true);
        mainMenusStack.Push(currentMainMenu);
    }
#endif
    }

    private AssetEnum GetAssetEnumByTutorialType(TutorialType tutorialType)
    {
        if (!TutorialModuleManager.Instance.IsModuleActive(tutorialType))
        {
            BytewarsLogger.LogWarning($"{tutorialType} is not active in this context.");
            return AssetEnum.MainMenuCanvas;
        }

        ModuleModel module = TutorialModuleManager.Instance.GetAllActiveModule()[tutorialType];
        return (AssetEnum) Enum.Parse(typeof(AssetEnum), module.mainPrefab.name);
    }

    private void InitCoreMenu()
    {
        if (!AssetManager.Singleton)
        {
            return;
        }

        object mainMenuConfigObj = AssetManager.Singleton.GetAsset(AssetEnum.MainMenuUiConfig);
        MainMenuUiConfig mainMenuConfig = mainMenuConfigObj as MainMenuUiConfig;

        if (mainMenuConfig == null)
        {
            return;
        }

        MenuCanvas starterMenu = Instantiate(mainMenuConfig.starter, transform);
        GameObject starterMenuGameObject = starterMenu.gameObject;

        starterMenuGameObject.SetActive(false);
        string mainMenuName = mainMenuConfig.starter.gameObject.name;
        starterMenuGameObject.name = mainMenuName;
        menusDictionary[starterMenu.GetAssetEnum()] = starterMenu;
        
        foreach (MenuCanvas menuCanvas in mainMenuConfig.otherMenuCanvas)
        {
            /* The Main Menu config may contains Tutorial Module UI assets and those asset IDs are persistently saved.
             * If the those assets does not exists (e.g. core game does not have Tutorial Modules), then do not initiate the UI. */
            if (menuCanvas == null) 
            {
                continue;
            }

            MenuCanvas otherCoreMenu = Instantiate(menuCanvas, transform);
            otherCoreMenu.gameObject.SetActive(false);
            string gameObjectName = menuCanvas.gameObject.name;
            if (containerAutoGeneratedButtons.TryGetValue(menuCanvas, out var autoGeneratedButtons))
            {
                otherCoreMenu.AddGeneratedButton(autoGeneratedButtons);
            }
            otherCoreMenu.name = gameObjectName;
            menusDictionary[menuCanvas.GetAssetEnum()] = otherCoreMenu;
        }
    }

    private void InitMenuByModules(ModuleModel moduleData)
    {
        if (moduleData.isUIDisable)
        {
            return;
        }

        MenuCanvas modulePrefab = moduleData.mainPrefab;
        MenuCanvas menuByModule = Instantiate(modulePrefab, Vector3.zero, Quaternion.identity, Instance.transform);

        menuByModule.gameObject.SetActive(false);
        if (containerAutoGeneratedButtons.TryGetValue(modulePrefab, out var autoGeneratedButtons))
        {
            menuByModule.AddGeneratedButton(autoGeneratedButtons);
        }

        menuByModule.name = modulePrefab.name;
        menusDictionary.TryAdd(menuByModule.GetAssetEnum(), menuByModule);
        menusDictionary[menuByModule.GetAssetEnum()].gameObject.SetActive(false);

        if (!moduleData.hasAdditionalPrefab)
        {
            return;
        }

        if (moduleData.additionalPrefab.Length == 0)
        {
            return;
        }
            
        foreach (MenuCanvas additionalPrefab in moduleData.additionalPrefab)
        {
            MenuCanvas additionalMenu = Instantiate(additionalPrefab, Vector3.zero, Quaternion.identity, Instance.transform);
            additionalMenu.gameObject.SetActive(false);

            if (containerAutoGeneratedButtons.TryGetValue(additionalPrefab, out var autoGeneratedButtonsAdditional))
            {
                additionalMenu.AddGeneratedButton(autoGeneratedButtonsAdditional);
            }

            additionalMenu.name = additionalPrefab.name;

            menusDictionary.TryAdd(additionalMenu.GetAssetEnum(), additionalMenu);
            menusDictionary[additionalMenu.GetAssetEnum()].gameObject.SetActive(false);
        }
    }

    private void InitOverlay()
    {
        GameObject pushNotificationPrefab = AssetManager.Singleton.GetAsset(AssetEnum.PushNotificationCanvas) as GameObject;
        GameObject pushNotificationCanvas = Instantiate(pushNotificationPrefab, transform);
        pushNotificationCanvas.name = pushNotificationPrefab.name;
        pushNotificationCanvas.SetActive(false);
    }

    private void InitPromptMenu()
    {
        GameObject promptPrefab = AssetManager.Singleton.GetAsset(AssetEnum.PromptMenuCanvas) as GameObject;
        GameObject promptCanvas = Instantiate(promptPrefab, transform);
        PromptMenu = promptCanvas.GetComponent<PromptMenuCanvas>();
        promptCanvas.name = promptPrefab.name;
        promptCanvas.SetActive(false);
    }

    public void InstantiateCanvas(AssetEnum assetEnum)
    {
        if (menusDictionary.TryGetValue(assetEnum, out MenuCanvas value))
        {
            return;
        }

        var test = (GameObject) AssetManager.Singleton.GetAsset(assetEnum);
        var modulePrefab = test.GetComponent<MenuCanvas>();
        MenuCanvas menuByModule = Instantiate(modulePrefab, Vector3.zero, Quaternion.identity, Instance.transform);

        menuByModule.gameObject.SetActive(false);
        menuByModule.name = modulePrefab.name;
        menusDictionary.Add(menuByModule.GetAssetEnum(), menuByModule);
    }

    /// <summary>
    /// Helper Function to disable Button UI
    /// </summary>
    /// <param name="button"></param>
    private void DisableButton(Button button)
    {
        button.enabled = false;
        button.transition = Selectable.Transition.None;
        button.GetComponent<Image>().color = Color.clear;
        button.GetComponentInChildren<TMP_Text>().color = Color.gray;
        button.enabled = false;
    }

    #endregion

    #region Loading Menu Methods

    public void ShowLoading(
        string info, 
        LoadingTimeoutInfo loadingTimeoutInfo = null, 
        UnityAction cancelCallback = null, 
        bool showButton = true,
        UnityAction okCallback = null, 
        bool disableOkButton = true, 
        string okButtonText = "Ok",
        string cancelButtonText = "Cancel")
    {
        LoadingMenuCanvas loadingMenuCanvas = menusDictionary[AssetEnum.LoadingMenuCanvas] as LoadingMenuCanvas;
        if (loadingMenuCanvas == null)
        {
            return;
        }

        if (IsMainMenuScene())
        {
            BlurEffect.ApplyBlurEffect(0.5f);
        }
        else
        {
            BlurEffect.RemoveBlurEffect();
        }
        
        currentMainMenu.gameObject.SetActive(false);
        currentPromptMenu = loadingMenuCanvas;

        loadingMenuCanvas.gameObject.SetActive(true);
        loadingMenuCanvas.Show(
            info,
            showButton,
            loadingTimeoutInfo, 
            cancelCallback, 
            okCallback, 
            disableOkButton, 
            okButtonText,
            cancelButtonText);
    }

    public void ShowAdditionalInfo(string info, bool hideButton)
    {
        LoadingMenuCanvas loadingMenuCanvas = menusDictionary[AssetEnum.LoadingMenuCanvas] as LoadingMenuCanvas;
        loadingMenuCanvas.ShowAdditionalInfo(info, hideButton);
    }

    public void HideAdditionalInfo()
    {
        LoadingMenuCanvas loadingMenuCanvas = menusDictionary[AssetEnum.LoadingMenuCanvas] as LoadingMenuCanvas;
        loadingMenuCanvas.HideAdditionalInfo();
    }

    public void HideLoading(bool showActiveMenuImmediately = true)
    {
        HideAdditionalInfo();
        menusDictionary[AssetEnum.LoadingMenuCanvas].gameObject.SetActive(false);
        currentPromptMenu = null;

        if (IsMainMenuScene())
        {
            BlurEffect.ApplyBlurEffect();
        }
        else
        {
            BlurEffect.RemoveBlurEffect();
        }

        if (showActiveMenuImmediately)
        {
            currentMainMenu.gameObject.SetActive(true);
        }
    }

    #endregion

    #region Countdown Methods

    public void UpdateLobbyCountdown(int countdown)
    {
        if (matchLobby == null)
        {
            MenuCanvas menu = menusDictionary[AssetEnum.MatchLobbyMenuCanvas];
            matchLobby = menu as MatchLobbyMenu;
        }

        if (matchLobby != null)
        {
            matchLobby.Countdown(countdown);
        }
    }

    public void UpdateGameOverCountdown(int countdown)
    {
        if (gameOverCanvas == null)
        {
            MenuCanvas menu = menusDictionary[AssetEnum.GameOverMenuCanvas];
            gameOverCanvas = menu as GameOverMenuCanvas;
        }

        if (gameOverCanvas != null)
        {
            gameOverCanvas.Countdown(countdown);
        }
    }

    #endregion

    #region Info Menu Methods

    public void ShowInfo(string info, string title="Info")
    {
        currentMainMenu.gameObject.SetActive(false);
        InfoMenuCanvas menu = menusDictionary[AssetEnum.InfoMenuCanvas] as InfoMenuCanvas;
        currentPromptMenu = menu;

        if (menu != null)
        {
            menu.Show(info, title);
        }
    }

    public void HideInfo()
    {
        currentPromptMenu = null;
        menusDictionary[AssetEnum.InfoMenuCanvas].gameObject.SetActive(false);
        currentMainMenu.gameObject.SetActive(true);
    }

    #endregion
    
    #region Events and Callbacks

    public void SetEventSystem(EventSystem eventSystem)
    {
#if !UNITY_WEBGL
        this.eventSystem = eventSystem;
        GameObject firstButton = currentMainMenu.GetFirstButton();
        this.eventSystem.firstSelectedGameObject = firstButton;
        this.eventSystem.SetSelectedGameObject(firstButton);
#endif
    }

    private static void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        if (IsMainMenuScene())
        {
            BlurEffect.ApplyBlurEffect();
        }
        else
        {
            BlurEffect.RemoveBlurEffect(0f);
        }
    }

    private void OnSceneUnloaded(Scene scene)
    {
        CameraMovement.MoveCamera(GameManager.Instance.MainCamera, TargetCameraPositions.First());
    }

    #endregion
    
    public T GetChildComponent<T>() => GetComponentInChildren<T>(true);

    #region State Check methods

    private static bool IsAgsSdkReady() => TutorialModuleUtil.IsAccelbyteSDKInstalled();

    private static bool IsMainMenuScene() => SceneManager.GetActiveScene().buildIndex == GameConstant.MenuSceneBuildIndex;

    private static bool IsGameScene() => SceneManager.GetActiveScene().buildIndex == GameConstant.GameSceneBuildIndex;
    
    private static bool IsAuthEssentialsActive() =>
        TutorialModuleManager.Instance.IsModuleActive(TutorialType.AuthEssentials);
    
#endregion
}
