using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using TMPro;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.SceneManagement;

public class MenuManager : MonoBehaviour
{
    public static MenuManager Instance { get; private set; }
    public bool IsInitiated { get; private set; } = false;
    public bool IsLoading => _menusDictionary[AssetEnum.LoadingMenuCanvas].gameObject.activeSelf;
    public Dictionary<AssetEnum, MenuCanvas> AllMenu => _menusDictionary;
    
    private const float AnimationDuration = 0.4f;
    private readonly Dictionary<AssetEnum, MenuCanvas> _menusDictionary = new();
    private readonly Stack<MenuCanvas> _mainMenusStack = new();
    private Stack<GameObject> _inGameStack = new();
    private Action _onHideAnimateComplete = null;
    private EventSystem _eventSystem;
    private GameObject _inGameMenu;
    private MenuCanvas _currentMainMenu;

    private MatchLobbyMenu _matchLobby;
    private GameOverMenuCanvas _gameOverCanvas;
    private Dictionary<MenuCanvas, List<AutoGeneratedButtonModel>> _containerAutoGeneratedButtons = new();
    private bool _isAGSDKReady = false;
    private bool _isNavigatingMenu = false;

    #region Initialization and Lifecycle

    /// <summary>
    /// Instantiate Menu manager as an instance
    /// </summary>
    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(this);
            return;
        }

        Instance = this;
        
        DontDestroyOnLoad(gameObject);
    }

    /// <summary>
    /// Start is called before the first frame update
    /// </summary>
    private void Start()
    {
        IsInitiated = true;

        InitMenu();
    }

    #endregion
    
    #region Runtime Initialize Functions

    /// <summary>
    /// Create MenuManager GameObject in Scene on Runtime
    /// </summary>
    [RuntimeInitializeOnLoadMethod]
    private static void SingletonInstanceChecker()
    {
        if (Instance != null)
        {
            return;
        }

        GameObject menuManagerGameObject = new GameObject("MenuManager");
        Instance = menuManagerGameObject.AddComponent<MenuManager>();
    }
    
    #endregion
    
    #region Change menu screen

    public MenuCanvas ChangeToMenu(AssetEnum assetEnum)
    {
        if (_isNavigatingMenu)
        {
            return null;
        }

        if (_currentMainMenu.GetAssetEnum() == assetEnum)
        {
            return _menusDictionary[assetEnum];
        }

        if (!_menusDictionary.TryGetValue(assetEnum, out MenuCanvas value))
        {
            InstantiateCanvas(assetEnum);
        }
        
        _isNavigatingMenu = true;
        LeanTween.alpha(_currentMainMenu.gameObject, 0, AnimationDuration).setOnComplete(() =>
        {
            OnChangeMenuComplete(assetEnum);
        });

        return _menusDictionary[assetEnum];
    }

    /// <summary>
    /// Change Menu Callback
    /// </summary>
    /// <param name="assetEnum"></param>
    private void OnChangeMenuComplete(AssetEnum assetEnum)
    {
        if (!_isNavigatingMenu)
        {
            return;
        }

        if (_currentMainMenu != null)
        {
            _currentMainMenu.gameObject.SetActive(false);
        }
        
        MenuCanvas targetMenu = _menusDictionary[assetEnum];
        if (!targetMenu.gameObject.activeSelf)
        {
            targetMenu.gameObject.SetActive(true);
        }

        _currentMainMenu = targetMenu;
        _eventSystem.SetSelectedGameObject(targetMenu.GetFirstButton());
        _mainMenusStack.Push(_currentMainMenu);
        _isNavigatingMenu = false;
    }
    
    public void ChangeToMenu(AssetEnum menuName, Action<MenuCanvas> onMenuChanged)
    {
        LeanTween.alpha(_currentMainMenu.gameObject, 0, AnimationDuration).setOnComplete(() =>
        {
            OnMenuChanged(menuName, onMenuChanged);
        });
    }

    private void OnMenuChanged(AssetEnum menuName, Action<MenuCanvas> onComplete)
    {
        if (_currentMainMenu != null)
        {
            _currentMainMenu.gameObject.SetActive(false);
        }

        MenuCanvas targetMenu = _menusDictionary[menuName];
        targetMenu.gameObject.SetActive(true);
        if (onComplete != null)
        {
            onComplete(targetMenu);
        }
        
        _currentMainMenu = targetMenu;
        _mainMenusStack.Push(_currentMainMenu);
    }

    public void HideAnimate(Action onHideAnimateComplete)
    {
        _onHideAnimateComplete = onHideAnimateComplete;
        LeanTween.alpha(_currentMainMenu.gameObject, 0, AnimationDuration).setOnComplete(OnHideAnimateTweenComplete);
    }

    private void ShowAnimate()
    {
        LeanTween.alpha(_currentMainMenu.gameObject, 0, AnimationDuration);
        _currentMainMenu.gameObject.SetActive(true);
    }

    private void OnHideAnimateTweenComplete()
    {
        CloseMenuPanel();
        if (_onHideAnimateComplete == null)
        {
            return;
        }

        _onHideAnimateComplete();
        _onHideAnimateComplete = null;
    }
    
    /// <summary>
    /// Change Scene
    /// </summary>
    /// <param name="sceneName"></param>
    public void ChangeScene(string sceneName)
    {
        LeanTween.alpha(_currentMainMenu.gameObject, 0, AnimationDuration).setOnComplete(() =>
        {
            OnChangeSceneComplete(sceneName);
        });
    }

    /// <summary>
    /// Change scene callback
    /// </summary>
    /// <param name="sceneName"></param>
    private static void OnChangeSceneComplete(string sceneName)
    {
        SceneManager.LoadScene(sceneName, LoadSceneMode.Single);
        Instance.CloseMenuPanel();
    }
    
    /// <summary>
    /// Pop the current menu and show the previous menu
    /// </summary>
    public void OnBackPressed()
    {
        if (_isNavigatingMenu)
        {
            return;
        }

        _isNavigatingMenu = true;
        GameObject currentBackButton = _currentMainMenu.GetFirstButton();
        
        LeanTween.alpha(currentBackButton, 0, AnimationDuration).setOnComplete(() =>
        {
            bool isFirstMenu = _mainMenusStack.Count <= 1;
            if (isFirstMenu)
            {
                return;
            }
            
            _mainMenusStack.Pop().gameObject.SetActive(false);
            _currentMainMenu = _mainMenusStack.Peek();
            _currentMainMenu.gameObject.SetActive(true);

            GameObject backButton = _currentMainMenu.GetFirstButton();
            backButton.SetActive(true);
            _eventSystem.SetSelectedGameObject(backButton);
            _isNavigatingMenu = false;
        });

    }

    /// <summary>
    /// Close the current menu panel
    /// </summary>
    public void CloseMenuPanel()
    {
        _currentMainMenu.gameObject.SetActive(false);
    }

    /// <summary>
    /// Go to main menu from another scene
    /// </summary>
    /// <param name="sceneBuildIndex"></param>
    public void ChangeToMainMenu(int sceneBuildIndex = -1)
    {
        AudioManager.Instance.PlayMenuBGM();
        
        Time.timeScale = 1; //this line is added to handle LeanTween bug

        LeanTween.alpha(_currentMainMenu.gameObject, 0, AnimationDuration).setOnComplete(() =>
        {
            OnChangeToMainMenuComplete(sceneBuildIndex);
        });
    }

    /// <summary>
    /// Go to main menu callback
    /// </summary>
    /// <param name="sceneBuildIndex"></param>
    private void OnChangeToMainMenuComplete(int sceneBuildIndex = -1)
    {
        if (sceneBuildIndex > -1)
        {
            SceneManager.LoadScene(sceneBuildIndex);
        }

        MenuCanvas mainMenu = _menusDictionary[AssetEnum.MainMenuCanvas];
        _currentMainMenu = mainMenu;
        _currentMainMenu.gameObject.SetActive(true);
        _mainMenusStack.Clear();
        _mainMenusStack.Push(_currentMainMenu);
        _eventSystem.SetSelectedGameObject(mainMenu.GetFirstButton());
    }

    #endregion

    #region Initialize and Instantiate Menu prefab

    private void InitMenu()
    {
        // Play Default Music
        if (AudioManager.Instance != null)
            AudioManager.Instance.PlayMenuBGM();
        if (!AssetManager.Singleton)
            return;

        InitOverlay();

        // bool isAuthEssentialExist = false; 
        var allActiveModule = TutorialModuleManager.Instance.GetAllActiveModule();
        _containerAutoGeneratedButtons = MenuHelper.GetContainerAndButtons(allActiveModule);
        foreach (var moduleNamePair in allActiveModule)
        {
            InitMenuByModules(moduleNamePair.Value);
        }
        InitCoreMenu();
        // Check If auth essential active
        if (allActiveModule.TryGetValue(TutorialType.AuthEssentials, out ModuleModel authEssential))
        {
            AssetEnum prefabname = (AssetEnum)System.Enum.Parse(typeof(AssetEnum), authEssential.mainPrefab.name);
            _currentMainMenu = _menusDictionary[prefabname];
            _currentMainMenu.gameObject.SetActive(true);
            _mainMenusStack.Push(_currentMainMenu);

            bool check = CheckAGSDKReady();

            if (!check.Equals(true))
            {
                //TODO: initialize ags sdk
                _currentMainMenu.gameObject.SetActive(false);
                _currentMainMenu = _menusDictionary[AssetEnum.LoadingMenuCanvas]; ;
                _currentMainMenu.gameObject.SetActive(true);
            }
        }
        else
        {
            _currentMainMenu = _menusDictionary[AssetEnum.MainMenuCanvas];
            _currentMainMenu.gameObject.SetActive(true);
            _mainMenusStack.Push(_currentMainMenu);

            bool check = CheckAGSDKReady();

            if (!check.Equals(true))
            {
                //TODO: initialize ags sdk
                _currentMainMenu.gameObject.SetActive(false);
                _currentMainMenu = _menusDictionary[AssetEnum.LoadingMenuCanvas]; ;
                _currentMainMenu.gameObject.SetActive(true);
            }
        }
    }

    private bool CheckAGSDKReady()
    {
        _isAGSDKReady = TutorialModuleUtil.IsAccelbyteSDKInstalled();
        return _isAGSDKReady;
    }

    private void InitCoreMenu()
    {
        if (!AssetManager.Singleton)
            return;
        object mainmenuConfigObj = AssetManager.Singleton.GetAsset(AssetEnum.MainMenuUiConfig);
        var mainmenuConfig = mainmenuConfigObj as MainMenuUiConfig;

        if (mainmenuConfig == null)
        {
            return;
        }

        var starterMenu = Instantiate(mainmenuConfig.starter, transform);
        GameObject o = starterMenu.gameObject;
        o.SetActive(false);
        string mainMenuName = mainmenuConfig.starter.gameObject.name;
        o.name = mainMenuName;
        _menusDictionary[starterMenu.GetAssetEnum()] = starterMenu;


        foreach (var menuCanvas in mainmenuConfig.otherMenuCanvas)
        {
            var otherCoreMenu = Instantiate(menuCanvas, transform);
            otherCoreMenu.gameObject.SetActive(false);
            string gameObjectName = menuCanvas.gameObject.name;
            if (_containerAutoGeneratedButtons.TryGetValue(menuCanvas, out var autoGeneratedButtons))
            {
                otherCoreMenu.AddGeneratedButton(autoGeneratedButtons);
            }
            otherCoreMenu.name = gameObjectName;
            _menusDictionary[menuCanvas.GetAssetEnum()] = otherCoreMenu;
        }
    }

    private void InitMenuByModules(ModuleModel moduleData)
    {
        if (moduleData.isUIDisable)
        {
            return;
        }
        var modulePrefab = moduleData.mainPrefab;
        var menubyModule = Instantiate(modulePrefab, Vector3.zero, Quaternion.identity, Instance.transform);
        menubyModule.gameObject.SetActive(false);
        if (_containerAutoGeneratedButtons.TryGetValue(modulePrefab, out var autoGeneratedButtons))
        {
            menubyModule.AddGeneratedButton(autoGeneratedButtons);
        }
        menubyModule.name = modulePrefab.name;
        _menusDictionary.TryAdd(menubyModule.GetAssetEnum(), menubyModule);
        _menusDictionary[menubyModule.GetAssetEnum()].gameObject.SetActive(false);


        if (moduleData.hasAdditionalPrefab)
        {
            if (moduleData.additionalPrefab.Length == 0)
            {
                return;
            }

            foreach (var additionalPrefab in moduleData.additionalPrefab)
            {
                var additionalMenu = Instantiate(additionalPrefab, Vector3.zero, Quaternion.identity, Instance.transform);
                additionalMenu.gameObject.SetActive(false);
                if (_containerAutoGeneratedButtons.TryGetValue(additionalPrefab, out var autoGeneratedButtonsAdditional))
                {
                    additionalMenu.AddGeneratedButton(autoGeneratedButtonsAdditional);
                }
                additionalMenu.name = additionalPrefab.name;
                _menusDictionary.TryAdd(additionalMenu.GetAssetEnum(), additionalMenu);
                _menusDictionary[additionalMenu.GetAssetEnum()].gameObject.SetActive(false);
            }
        }
    }

    private void InitOverlay()
    {
        GameObject pushNotificationPrefab = AssetManager.Singleton.GetAsset(AssetEnum.PushNotificationCanvas) as GameObject;
        GameObject pushNotificationCanvas = Instantiate(pushNotificationPrefab, transform);
        pushNotificationCanvas.name = pushNotificationPrefab.name;
        pushNotificationCanvas.SetActive(false);
    }

    public void InstantiateCanvas(AssetEnum assetEnum)
    {
        if (_menusDictionary.TryGetValue(assetEnum, out var value))
        {
            return;
        }
        var test = (GameObject)AssetManager.Singleton.GetAsset(assetEnum);
        var modulePrefab = test.GetComponent<MenuCanvas>();
        var menubyModule = Instantiate(modulePrefab, Vector3.zero, Quaternion.identity, Instance.transform);
        menubyModule.gameObject.SetActive(false);
        menubyModule.name = modulePrefab.name;
        _menusDictionary.Add(menubyModule.GetAssetEnum(), menubyModule);
        // _menusDictionary[menubyModule.GetAssetEnum()].gameObject.SetActive(false);
    }
    /// <summary>
    /// Helper Function to disable Button UI
    /// </summary>
    /// <param name="button"></param>
    private void DisableButton(Button button)
    {
        button.enabled = false;
        button.transition = Selectable.Transition.None;
        button.GetComponent<Image>().color = Color.clear;
        button.GetComponentInChildren<TMP_Text>().color = Color.gray;
        button.enabled = false;
    }

    #endregion

    #region Action from related to login screen

    /// <summary>
    /// Return to login menu
    /// </summary>
    public void BackToLoginMenu()
    {
        if (_currentMainMenu != null)
        {
            _currentMainMenu.gameObject.SetActive(false);
        }

        // // var loginMenu = _menusDictionary[MenuEnum.LoginMenuCanvas.ToString()];
        //
        // loginMenu.SetActive(true);
        // _currentMainMenu = loginMenu;
        // _mainMenusStack.Clear();
    }

    /// <summary>
    /// Go to Main menu from Login menu
    /// </summary>
    public void LoginToMainMenu()
    {
        ChangeToMainMenu();
    }

    #endregion

    public void SetEventSystem(EventSystem eventSystem)
    {
        _eventSystem = eventSystem;
        GameObject firstButton = _currentMainMenu.GetFirstButton();
        _eventSystem.firstSelectedGameObject = firstButton;
        _eventSystem.SetSelectedGameObject(firstButton);
    }

    public MenuCanvas ShowInGameMenu(AssetEnum assetEnum)
    {
        if (!_currentMainMenu)
        {
            return null;
        }

        if (_currentMainMenu.GetAssetEnum() != assetEnum)
        {
            return SwitchToMenu(assetEnum);
        }

        ShowAnimate();
        return _currentMainMenu;
    }

    private MenuCanvas SwitchToMenu(AssetEnum assetEnum)
    {
        MenuCanvas targetMenu = _menusDictionary[assetEnum];
        targetMenu.gameObject.SetActive(true);
        _currentMainMenu = targetMenu;
        _eventSystem.SetSelectedGameObject(targetMenu.GetFirstButton());
        return targetMenu;
    }

    public void ShowLoading(string info, LoadingTimeoutInfo loadingTimeoutInfo = null, UnityAction cancelCallback = null)
    {
        LoadingMenuCanvas loadingMenuCanvas = _menusDictionary[AssetEnum.LoadingMenuCanvas] as LoadingMenuCanvas;
        if (loadingMenuCanvas == null)
        {
            return;
        }
        
        _currentMainMenu.gameObject.SetActive(false);
        loadingMenuCanvas.gameObject.SetActive(true);
        loadingMenuCanvas.Show(info, loadingTimeoutInfo, cancelCallback);
    }

    public void HideLoading(bool showActiveMenuImmediately = true)
    {
        _menusDictionary[AssetEnum.LoadingMenuCanvas].gameObject.SetActive(false);

        if (showActiveMenuImmediately)
        {
            _currentMainMenu.gameObject.SetActive(true);
        }
    }

    public void UpdateLobbyCountdown(int countdown)
    {
        if (_matchLobby == null)
        {
            MenuCanvas menu = _menusDictionary[AssetEnum.MatchLobbyMenuCanvas];
            _matchLobby = menu as MatchLobbyMenu;
        }

        if (_matchLobby != null)
        {
            _matchLobby.Countdown(countdown);
        }
    }

    public void UpdateGameOverCountdown(int countdown)
    {
        if (_gameOverCanvas == null)
        {
            MenuCanvas menu = _menusDictionary[AssetEnum.GameOverMenuCanvas];
            _gameOverCanvas = menu as GameOverMenuCanvas;
        }

        if (_gameOverCanvas != null)
        {
            _gameOverCanvas.Countdown(countdown);
        }
    }

    public void ShowInfo(string info, string title = "Info")
    {
        _currentMainMenu.gameObject.SetActive(false);
        InfoMenuCanvas menu = _menusDictionary[AssetEnum.InfoMenuCanvas] as InfoMenuCanvas;

        if (menu != null)
        {
            menu.Show(info, title);
        }
    }

    public void HideInfo()
    {
        _menusDictionary[AssetEnum.InfoMenuCanvas].gameObject.SetActive(false);
        _currentMainMenu.gameObject.SetActive(true);
    }

    public MenuCanvas GetCurrentMenu()
    {
        return _currentMainMenu;
    }

    public MenuCanvas GetMenu(AssetEnum assetEnum)
    {
        return _menusDictionary.GetValueOrDefault(assetEnum);
    }

    public T GetChildComponent<T>()
    {
        return GetComponentInChildren<T>(true);
    }

    public MenuCanvas ChangeToMenu(TutorialType tutorialType)
    {
        var allActiveModule = TutorialModuleManager.Instance.GetAllActiveModule();
        if (allActiveModule.TryGetValue(tutorialType, out ModuleModel tutorialData))
        {
            AssetEnum assetEnum = tutorialData.mainPrefab.GetAssetEnum();
            return ChangeToMenu(assetEnum);
        }

        BytewarsLogger.LogWarning($"{tutorialType} TutorialType is not active");
        return null;
    }
}
