using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;


[Serializable]
public abstract class MenuCanvas : MonoBehaviour
{
    #region Abstract Methods
    public abstract GameObject GetFirstButton();
    public abstract AssetEnum GetAssetEnum();
    #endregion
    [SerializeField]
    private RectTransform mainButtonsContainer;
    private LayoutGroup _layoutGroup;
    private const int MaxCheckLayoutTimeout = 2;
    private int _checkLayoutCounter = 0;
    public void AddGeneratedButton(List<AutoGeneratedButtonModel> buttonModels)
    {
        //Get buttons container
        if (mainButtonsContainer == null)
        {
            Debug.LogWarning($"auto generated button container in {gameObject.name} is null, unable to auto generate button");
            return;
        }
        ButtonAnimation button = null;
        //Instantiate buttons
        foreach (var model in buttonModels)
        {
            button = Instantiate(model.buttonPrefab, mainButtonsContainer);
            button.button.onClick = model.buttonEvent;
            button.text.text = model.buttonLabel;
            button.name = model.buttonLabel;
        }
        _layoutGroup = mainButtonsContainer.GetComponent<LayoutGroup>();
        if (_layoutGroup != null)
        {
            FixLayoutAsync(button);
        }
    }

    private async void FixLayoutAsync(ButtonAnimation lastButton)
    {
        _checkLayoutCounter = 0;
        _layoutGroup.enabled = false;
        while (!lastButton.gameObject.activeInHierarchy)
        {
            if (_checkLayoutCounter >= MaxCheckLayoutTimeout)
            {
                break;
            }
            await Task.Delay(50);
            _checkLayoutCounter++;
        }
        await Task.Delay(50);
        _layoutGroup.enabled = true;
    }

    public void SetAutogeneratedBtnVisibility(string buttonLabelName, bool isVisible)
    {
        var btn = mainButtonsContainer.Find(buttonLabelName);
        if (btn != null)
        {
            btn.gameObject.SetActive(isVisible);
        }
    }
    protected void ShowLoading(string loadingMessage, 
        string timeoutReachedMessage, int timeoutInSecond, 
        UnityAction cancelCallback=null)
    {
        MenuManager.Instance.HideInfo();
        MenuManager.Instance.ShowLoading(loadingMessage, 
            new LoadingTimeoutInfo(){info = "will timeout in ", 
                timeoutReachedError = timeoutReachedMessage, timeoutSec = timeoutInSecond}, 
            cancelCallback);
    }
    protected void ShowError(string errorMessage)
    {
        MenuManager.Instance.HideLoading();
        MenuManager.Instance.ShowInfo(errorMessage, "Error");
    }
    protected void HideLoading()
    {
        MenuManager.Instance.HideLoading();
    }
}