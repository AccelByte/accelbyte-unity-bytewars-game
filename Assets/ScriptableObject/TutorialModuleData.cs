// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

using UnityEngine;
using UnityEditor;

[CreateAssetMenu]
public class TutorialModuleData : ScriptableObject
{
    [System.Serializable]
    public class TutorialModuleDataCache
    {
        public bool IsActive;
        public bool IsStarterActive;
    };

    public bool isBaseModule;
    public bool disableUI;
    public MenuCanvas defaultMenuUIPrefab;
    public MenuCanvas[] defaultAdditionalMenuUIPrefabs;
    public TextAsset defaultModuleScript;
    public TutorialType type;
    public bool isActive;
    public bool additionalScripts;
    public bool additionalPrefab;
    public TextAsset[] defaultHelperScripts;
    public TextAsset[] starterHelperScripts;
    public TextAsset starterScript;
    public MenuCanvas starterMenuUIPrefab;
    public MenuCanvas[] starterAdditionalMenuUIPrefabs;
    public bool isStarterActive;
    public TutorialModuleData[] moduleDependencies;

    #region Tutorial Module Generated Prefabs
    
    public PrefabObjectType instantiatedPrefabType;
    public string instantiatedGameObjectName;
    public PrefabClassType prefabClassType;
    public int associateDefaultPrefabClass;
    public int associateStarterPrefabClass;
    public TutorialType otherTutorialModule;
    public AssetEnum genericPrefabClass;
    public string buttonText;
    public string targetParentGameObjectPath;
    public int spawnOrder;
    
    #endregion

    public AutoGeneratedButtonModel[] autoGeneratedButtonModel;
    public AutoGeneratedButtonModel[] autoGeneratedButtonModelStarter;

    [SerializeField] private bool isOverridden = false;
    [SerializeField] private TutorialModuleDataCache cachedState;

    public void CacheState()
    {
#if UNITY_EDITOR
        bool isForceDisableOtherModules = TutorialModuleForceEnable.IsForceDisable;
        bool isForceEnableModule = TutorialModuleForceEnable.IsForceEnableModule(name);

        if (!isOverridden && (isForceEnableModule || isForceDisableOtherModules))
        {
            cachedState ??= new TutorialModuleDataCache();
            cachedState.IsActive = isActive;
            cachedState.IsStarterActive = isStarterActive;
            isOverridden = true;
        }

        EditorUtility.SetDirty(this);
#endif
    }

    public void RevertState()
    {
#if UNITY_EDITOR
        if (isOverridden && cachedState != null)
        {
            isActive = cachedState.IsActive;
            isStarterActive = cachedState.IsStarterActive;
            isOverridden = false;
        }

        EditorUtility.SetDirty(this);
#endif
    }
}