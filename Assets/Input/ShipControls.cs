//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/ShipControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShipControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShipControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShipControls"",
    ""maps"": [
        {
            ""name"": ""PlayerShipControls"",
            ""id"": ""68262dcf-de06-45ae-8651-101d5111d578"",
            ""actions"": [
                {
                    ""name"": ""RotateShip"",
                    ""type"": ""Value"",
                    ""id"": ""ad60456e-5c53-434e-a4d5-3f3e5b22348c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""1cac3e98-a88d-4c70-b7b3-4102c63bc8b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenPauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""923f68e6-bc0e-4ee9-9987-d49bdbfc2819"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangePower"",
                    ""type"": ""PassThrough"",
                    ""id"": ""14064e67-daae-404c-94f5-1c1ea4cde135"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""73b27180-cdad-42b7-b742-595627be0e3a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateShip"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a084dfad-b09a-44ff-8506-950ac9f21c43"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""47dada71-e941-4e66-8700-b348013879a2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""12d3ed55-0ebc-4e31-8ca3-775259d5a050"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateShip"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d627851b-1502-4827-ae73-228756bbbb27"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a560e50d-8192-4e53-87aa-614d434297e1"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bbeb4eec-8bea-4992-a618-4502caa98911"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ba63278-e161-4827-9300-89f38170dbe5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba17f7f2-fb6b-40f1-b4ab-f0c566533896"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dbb83a6-80de-4626-af49-96a2ca1f19f1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OpenPauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c1a0db7-1eaf-4b1a-a722-c341b19b4f1a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenPauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3c862997-3163-4501-a7fc-4bd3377849d6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fb211fa0-c508-472d-8a2d-f4c3bb40acfc"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0351fb75-3566-414a-b5c1-8f21e67144c9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4f10ea3d-f3c5-4900-909d-2b025bec9526"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""753d5d41-1127-4a22-8243-78bd5c300afc"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""77f9dc0c-ddd4-49fa-a31c-af7338066520"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""816f08cc-1b96-4446-af15-b69c17cc1edb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0298ad47-d8b4-4a86-aa67-82e0f0d2d8c1"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b06114b5-9e6c-46a1-931f-957eb55d1aef"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerShipControls
        m_PlayerShipControls = asset.FindActionMap("PlayerShipControls", throwIfNotFound: true);
        m_PlayerShipControls_RotateShip = m_PlayerShipControls.FindAction("RotateShip", throwIfNotFound: true);
        m_PlayerShipControls_Fire = m_PlayerShipControls.FindAction("Fire", throwIfNotFound: true);
        m_PlayerShipControls_OpenPauseMenu = m_PlayerShipControls.FindAction("OpenPauseMenu", throwIfNotFound: true);
        m_PlayerShipControls_ChangePower = m_PlayerShipControls.FindAction("ChangePower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerShipControls
    private readonly InputActionMap m_PlayerShipControls;
    private IPlayerShipControlsActions m_PlayerShipControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerShipControls_RotateShip;
    private readonly InputAction m_PlayerShipControls_Fire;
    private readonly InputAction m_PlayerShipControls_OpenPauseMenu;
    private readonly InputAction m_PlayerShipControls_ChangePower;
    public struct PlayerShipControlsActions
    {
        private @ShipControls m_Wrapper;
        public PlayerShipControlsActions(@ShipControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateShip => m_Wrapper.m_PlayerShipControls_RotateShip;
        public InputAction @Fire => m_Wrapper.m_PlayerShipControls_Fire;
        public InputAction @OpenPauseMenu => m_Wrapper.m_PlayerShipControls_OpenPauseMenu;
        public InputAction @ChangePower => m_Wrapper.m_PlayerShipControls_ChangePower;
        public InputActionMap Get() { return m_Wrapper.m_PlayerShipControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerShipControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerShipControlsActions instance)
        {
            if (m_Wrapper.m_PlayerShipControlsActionsCallbackInterface != null)
            {
                @RotateShip.started -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnRotateShip;
                @RotateShip.performed -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnRotateShip;
                @RotateShip.canceled -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnRotateShip;
                @Fire.started -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnFire;
                @OpenPauseMenu.started -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnOpenPauseMenu;
                @OpenPauseMenu.performed -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnOpenPauseMenu;
                @OpenPauseMenu.canceled -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnOpenPauseMenu;
                @ChangePower.started -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnChangePower;
                @ChangePower.performed -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnChangePower;
                @ChangePower.canceled -= m_Wrapper.m_PlayerShipControlsActionsCallbackInterface.OnChangePower;
            }
            m_Wrapper.m_PlayerShipControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateShip.started += instance.OnRotateShip;
                @RotateShip.performed += instance.OnRotateShip;
                @RotateShip.canceled += instance.OnRotateShip;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @OpenPauseMenu.started += instance.OnOpenPauseMenu;
                @OpenPauseMenu.performed += instance.OnOpenPauseMenu;
                @OpenPauseMenu.canceled += instance.OnOpenPauseMenu;
                @ChangePower.started += instance.OnChangePower;
                @ChangePower.performed += instance.OnChangePower;
                @ChangePower.canceled += instance.OnChangePower;
            }
        }
    }
    public PlayerShipControlsActions @PlayerShipControls => new PlayerShipControlsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerShipControlsActions
    {
        void OnRotateShip(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnOpenPauseMenu(InputAction.CallbackContext context);
        void OnChangePower(InputAction.CallbackContext context);
    }
}
